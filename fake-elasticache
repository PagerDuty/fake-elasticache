#!/usr/bin/env ruby

require 'eventmachine'

module FakeElasticache

  class Server < EventMachine::Connection
    def receive_data(data)
      close_connection if data =~ /quit/i

      puts "FakeElasticache::Server#receive_data - data: #{data}"

      resp = case data
             when /version/i                          then version_output
             when /config get cluster/i               then config_output
             when /get AmazonElastiCache:cluster/i    then config_output
             else
               "Command: #{data} is unexpected\n"
             end

      puts "FakeElasticache::Server#receive_data - resp: #{resp}"

      send_data(resp)
    end

    private

    def opts
      FakeElasticache.opts
    end

    def version_output
      "VERSION #{opts[:version]}\n"
    end

    def config_output
      config_string = opts[:servers].join(' ')
      "CONFIG cluster 0 #{config_string.length}\r\n1\n#{config_string}\n\r\nEND\r\n"
    end
  end

  class << self
    def run!
      puts "FakeElasticache.run! - opts: #{opts}"
      EventMachine.run do
        EventMachine.start_server(opts[:bind], opts[:port], FakeElasticache::Server)
      end
    end

    def opts
      {
        port:    ENV.fetch('PORT', 11211),
        bind:    ENV.fetch('ADDR', '0.0.0.0'),
        servers: ENV.fetch('SERVERS', 'memcached|memcached|11212').split(','),
        version: ENV.fetch('MEMCACHED_VERSION', '2.4.14')
      }
    end
  end
end

FakeElasticache.run!
